<?php

declare(strict_types=1);

use WTFramework\SQL\SQL;

it('can set generated always as', function ()
{

  expect(
    (string) SQL::column('test1')
    ->as('test2')
  )
  ->toEqual("test1 GENERATED ALWAYS AS (test2)");

});

it('can set generated always as row start', function ()
{

  expect(
    (string) SQL::column('test1')
    ->asRowStart()
  )
  ->toEqual("test1 GENERATED ALWAYS AS ROW START");

});

it('can set generated always as row end', function ()
{

  expect(
    (string) SQL::column('test1')
    ->asRowEnd()
  )
  ->toEqual("test1 GENERATED ALWAYS AS ROW END");

});

it('can set generated always as identity', function ()
{

  expect(
    (string) SQL::column('test1')
    ->alwaysAsIdentity()
  )
  ->toEqual("test1 GENERATED ALWAYS AS IDENTITY");

});

it('can set generated always as identity with sequence options', function ()
{

  expect(
    (string) SQL::column('test1')
    ->alwaysAsIdentity('test')
  )
  ->toEqual("test1 GENERATED ALWAYS AS IDENTITY (test)");

});

it('can set generated always by default as identity', function ()
{

  expect(
    (string) SQL::column('test1')
    ->byDefaultAsIdentity()
  )
  ->toEqual("test1 GENERATED BY DEFAULT AS IDENTITY");

});

it('can set generated always by default as identity with sequence options', function ()
{

  expect(
    (string) SQL::column('test1')
    ->byDefaultAsIdentity('test')
  )
  ->toEqual("test1 GENERATED BY DEFAULT AS IDENTITY (test)");

});

it('can set generated always as bound value', function ()
{

  expect(
    (string) $column = SQL::column('test1')
    ->as(SQL::bind('test2'))
  )
  ->toEqual("test1 GENERATED ALWAYS AS (?)");

  expect($column->bindings())
  ->toEqual(['test2']);

});